- Place training images with associated .xmls in models/research/object_detection/images/train/ (images/ should also have a folder named test/)
- From the object_detection directory, run ./master_training_script_python.sh
- When lines like "INFO:tensorflow:global step 00001: loss = 10.000 (0.818 sec/step)" are continously appearing, then training has started.
- In a new terminal, run tensorboard --logdir=training/
    - Should output something like "TensorBoard 1.5.0 at http://ubuntu:6006" <-- right click on that link, copy the link address,
      and paste it in Chrome/Firefox to view TensorBoard
    - Click Learning_Rate to minimize it, then click TotalLoss to see the training performance plot
- When satisfied with the model's performance, kill training with Ctrl-C
- run "rm -rf tennisball_graph/saved_model/"
- In the models/research/object_detection directory, run the following command, filling in XXXX with the # of last model checkpoint in training/:
python export_inference_graph.py \
    --input_type image_tensor \
    --pipeline_config_path training/ssd_inception_v2_coco.config \
    --trained_checkpoint_prefix training/model.ckpt-XXXX \
    --output_directory tennisball_graph
- If you get "ImportError: No module named 'nets'", run (from the models/research/ dir):
export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
    then run the above command "python export_inference_graph.py ..." again.
- The newly created frozen_inference_graph.pb file under tennisball_graph is the graph you want.
- Modify tb_detection.py with the name of the new frozen inference graph and run the tb_detection.py script. It should now detect tennis balls.
